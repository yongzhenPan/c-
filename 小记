为什么头文件放置函数、变量、类的声明，而有一个源文件来放置函数、变量、类的定义？
答：将声明与定义分开，利于分离式编译。
    假如我们现在有一个pyz.cpp文件，我们在里面声明定义了一个函数pc()，而现在出现了另一个文件py.cpp，他想使用我们pyz.cpp里面的pc()函数。
    那怎么办？  那就只能让py.cpp去#include<pyz.cpp>，相当于把pyz.cpp的代码都插入py.cpp里面了，经过插入，py.cpp也拥有了pc()的声明和定义。
    
    那问题来了，这样我的源代码就暴露了鸭，如果我的声明和定义一起写在pyz.cpp里面，别人打开pyz.cpp一看就知道我是怎么实现pc()的，这就不太行了。我得想想办法，我再开出来一个文件,命名pyz.h，就把pc()的函数声明写进去，让py.cpp知道函数接口，知道这个函数是干什么的，接受什么参数，如何使用。好的，就让他知道这么多就行了，这个pyz.h就不写pc()的实现代码进去了。那pc()的实现代码就写到pyz.cpp里面去咯，即pc()的定义写到pyz.cpp里面。实现了声明与定义分离。这样就保护了我的源代码，实现接口与实现分离。
    
    同时还有一个好处，就是如果多个要使用pc()的源文件都使用#include "pyz.h"，那么要修改声明的时候，就只需要在pyz.h里面修改即可，不用一个个源文件去逐一修改声明！
