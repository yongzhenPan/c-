头文件中不要放全局变量，不然会造成多个.cpp(.cc)文件包含这个头文件时发生链接时重定义问题
如果真的是有多个文件都用到一套全局变量，那么把这些全局变量声明到一个.h头文件中，在用一个include了这个头文件的.cpp(.cc)文件把这些全局变量定义了，这就
避免了多次定义，多次声明没有毛病。
特殊的是const变量采用内部链接，即使在一个头文件定义，也不会出现重定义。

可能就是为了避免头文件中const常量的值要链接到另一个定义了定义了值的.cpp文件才指导，这样对于那些使用了头文件的人来说，他的const常量其实是不具备常量值，就不能用到类似switch的case 常量值:语句中，或者是int a[常量值]中，丧失了常量的用武之地，所以为了规避，我们才许可允许在头文件中定义的const常量可避免重定义问题。普通变量就还是遵循重开一个头文件和源文件来声明和定义步骤。

但是虽然在一个头文件定义了
//a.h
const int i=9;
extern int p;

//a.cpp
#include"a.h"
p=7;

//pyz.cpp
#include"a.h"


//pc.cpp
#include"a.h"

虽然不会导致链接时重定义，但是，如果头文件包含关系发生重叠，那直接就发生编译时的重定义
//a.h
const int i=9;
extern int p;

//a.cpp
#include"a.h"
p=7;

//pyz.h
#include"a.h"


//pc.cpp
#include"a.h"

//main.cpp
#include"a.h"
#include"pyz.h"(由于pyz.h已包含过"a.h") 那么编译时重定义发生

所以头文件包含慎重！！！！

一个类中使用了另一个类的指针和引用，不需要定义完成，但是需要一个前置声明！！











